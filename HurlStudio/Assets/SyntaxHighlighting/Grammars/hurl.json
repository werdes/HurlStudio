{
  "version": "0.1.0",
  "name": "hurl",
  "scopeName": "hurl",
  "repository": {
    "url": {
      "name": "notation.url",
      "match": "https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)",
      "patterns": [
        {
          "include": "#variables"
        }
      ]
    },
    "parentheses": {
      "begin": "(\\()",
      "beginCaptures": {
        "1": {
          "name": "notation.parentheses.open"
        }
      },
      "end": "(\\))",
      "endCaptures": {
        "1": {
          "name": "notation.parentheses.close"
        }
      },
      "patterns": [
        {
          "include": "#keywords"
        },
        {
          "include": "#notation"
        }
      ]
    },
    "brackets": {
      "begin": "(\\[)",
      "beginCaptures": {
        "1": {
          "name": "notation.brackets.open"
        }
      },
      "end": "(\\])",
      "endCaptures": {
        "1": {
          "name": "notation.brackets.close"
        }
      },
      "patterns": [
        {
          "include": "#keywords"
        },
        {
          "include": "#notation"
        }
      ]
    },
    "quotes": {
      "patterns": [
        {
          "name": "notation.quotes.single",
          "begin": "'",
          "beginCaptures": {
            "0": {
              "name": "notation.quotes.single.begin"
            }
          },
          "end": "(\\')|((?:[^\\\\\\n])$)",
          "endCaptures": {
            "1": {
              "name": "notation.quotes.single.end"
            },
            "2": {
              "name": "invalid.illegal.newline"
            }
          },
          "patterns": [
            {
              "name": "notation.escape",
              "match": "\\\\(x[0-9a-fA-F]{1,4}|u[0-9a-fA-F]{4}|.)"
            },
            {
              "include": "#keywords"
            },
            {
              "include": "#notation"
            }
          ]
        },
        {
          "name": "notation.quotes.double",
          "begin": "(?<!@)\"",
          "beginCaptures": {
            "0": {
              "name": "notation.quotes.double.begin"
            }
          },
          "end": "(\")|((?:[^\\\\\\n])$)",
          "endCaptures": {
            "1": {
              "name": "notation.quotes.double.end"
            },
            "2": {
              "name": "invalid.illegal.newline"
            }
          },
          "patterns": [
            {
              "name": "notation.escape",
              "match": "\\\\(x[0-9a-fA-F]{1,4}|U[0-9a-fA-F]{8}|u[0-9a-fA-F]{4}|.)"
            },
            {
              "include": "#notation"
            }
          ]
        }
      ]
    },
    "variables": {
      "name": "notation.variable",
      "match": "{{?([A-Za-z_\\-0-9]*)}?}"
    },
    "notation": {
      "patterns": [
        {
          "name": "notation.comment",
          "match": "#(.*)"
        },
        {
          "name": "notation.keyvalue.key",
          "match": "^([^:]*)\\:"
        },
        {
          "include": "#url"
        },
        {
          "include": "#parentheses"
        },
        {
          "include": "#brackets"
        },
        {
          "include": "#quotes"
        },
        {
          "include": "#variables"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.method",
          "match": "\\b(GET|HEAD|POST|PUT|DELETE|CONNECT|OPTIONS|TRACE|PATCH)\\b"
        },
        {
          "name": "keyword.assertion.query",
          "match": "\\b(status|header|url|cookie|body|bytes|xpath|jsonpath|regex|sha256|md5|variable|duration|certificate)\\b"
        },
        {
          "name": "keyword.assertion.predicate",
          "match": "\\b(startsWith|endsWith|contains|includes|matches|exists|isBoolean|isCollection|isDate|isEmpty|isFloat|isInteger|isString|isNumber|isIsoDate)\\b"
        },
        {
          "name": "keyword.filter",
          "match": "\\b(count|daysAfterNow|daysBeforeNow|decode|format|htmlEscape|htmlUnescape|jsonpath|nth|regex|replace|split|toDate|toInt|urlDecode|urlEncode|xpath)\\b"
        },
        {
          "name": "response",
          "match": "\\b(HTTP\\/1.0|HTTP\\/1.1|HTTP\\/2|HTTP\\/3|HTTP)(?: *)\\b([0-9]{3})",
          "captures": {
            "1": {
              "name": "keyword.http"
            },
            "2": {
              "name": "response.statuscode"
            }
          }
        },
        {
          "name": "keyword.section",
          "match": "\\[(BasicAuth|Options|Asserts|Captures|Cookies|MultipartFormData|FormParams|QueryStringParams)\\]"
        }
      ]
    }
  },
  "patterns": [
    {
      "include": "#keywords"
    },
    {
      "include": "#notation"
    }
  ]
}